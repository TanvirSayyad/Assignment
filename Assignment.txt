#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <climits>

using namespace std;

int networkDelayTime(vector<vector<int>>& times, int n, int k) {
//s1
    vector<int> dist(n, INT_MAX);
    dist[k-1] = 0;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, k});

    // S2s3
    while (!pq.empty()) {
        int time = pq.top().first;
        int node = pq.top().second;
        pq.pop();

        // S4
        for (auto& t : times) {
            if (t[0] == node) {
                int neighbor = t[1];
                int cost = t[2];
                int new_dist = dist[node-1] + cost;
                if (new_dist < dist[neighbor-1]) {
                    dist[neighbor-1] = new_dist;
                    pq.push({new_dist, neighbor});
                }
            }
        }
    }

    //s5
    if (any_of(dist.begin(), dist.end(), [](int d){ return d == INT_MAX; })) {
        return -1;
    }
    return *max_element(dist.begin(), dist.end());
}

int main() {
    vector<vector<int>> times = {{2,1,1},{2,3,1},{3,4,1}};
    int n = 4;
    int k = 2;
    int result = networkDelayTime(times, n, k);
    cout << "The mini time to all nodes to receive the signal" << result << endl;
    return 0;
}
